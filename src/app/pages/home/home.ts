import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import { inject } from '@angular/core';
import { Title, Meta } from '@angular/platform-browser';

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './home.html',
  styleUrl: './home.scss'
})
export class Home implements OnInit {
  http = inject(HttpClient);
  showCalculator = false;
  phoneNumber = '';
  selectedBathType = '';
  showSuccessMessage = false;

  constructor(
    private titleService: Title,
    private metaService: Meta
  ) {}

  ngOnInit() {
    this.titleService.setTitle('BANYA TUT - –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –±–∞–Ω—å-–±–æ—á–µ–∫ –∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –±–∞–Ω—å –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞ | –ë—Ä–µ—Å—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å');
    this.metaService.updateTag({ name: 'description', content: 'BANYA TUT - –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –±–∞–Ω—å-–±–æ—á–µ–∫ –∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –±–∞–Ω—å –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∞–Ω–∏ –æ–Ω–ª–∞–π–Ω. –ü–∞–Ω–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Å–±–æ—Ä–∫–∏, —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã. –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –æ–±–ª–∞—Å—Ç–∏ –æ—Ç 300 —Ä—É–±.' });
    this.metaService.updateTag({ name: 'keywords', content: '–±–∞–Ω—è-–±–æ—á–∫–∞, –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –±–∞–Ω—è, —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∞–Ω–∏, –±–∞–Ω—è –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞, –ë—Ä–µ—Å—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å' });
  }

  calculatePrice() {
    if (this.phoneNumber && this.selectedBathType) {
      const date = new Date();
      const formattedDate = date.toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      });

      const bathTypeText = this.selectedBathType === 'square' ? '–ö–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –±–∞–Ω—è' : '–ë–∞–Ω—è-–±–æ—á–∫–∞';

      const message =
        `üè† *–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∞–Ω–∏*\n\n` +
        `üìÖ –î–∞—Ç–∞: ${formattedDate}\n` +
        `üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${this.phoneNumber}\n` +
        `üè° –¢–∏–ø –±–∞–Ω–∏: ${bathTypeText}\n` +
        `üìù –ò—Å—Ç–æ—á–Ω–∏–∫: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞`;

      const url = `https://api.telegram.org/bot8409391989:AAGfNKCOk4pZP-nWHEzmRJ2JzN0EjnBcUkk/sendMessage`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
      this.http
        .post(url, {
          chat_id: '7557882902',
          text: message,
          parse_mode: 'Markdown',
        })
        .subscribe({
          next: (response) => {
            console.log('success main chat', response);
          },
          error: (errorResponse) => {
            console.log('error main chat', errorResponse);
          },
        });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —á–∞—Ç
      this.http
        .post(url, {
          chat_id: '5390444241',
          text: message,
          parse_mode: 'Markdown',
        })
        .subscribe({
          next: (response) => {
            console.log('success additional chat', response);
            this.showSuccessMessage = true;
            this.resetForm();
          },
          error: (errorResponse) => {
            console.log('error additional chat', errorResponse);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
          },
        });
    } else {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
    }
  }

  // –û–±–Ω—É–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
  resetForm() {
    this.phoneNumber = '';
    this.selectedBathType = '';
    this.showCalculator = false;
  }

  // –°–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
  hideSuccessMessage() {
    this.showSuccessMessage = false;
  }
}
